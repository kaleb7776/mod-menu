-- LocalScript Melhorado

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local root = char:WaitForChild("HumanoidRootPart")

-- ======== CONFIG ========
local VELOCIDADE = 30
local DESTINO_FIXO = Vector3.new(3314, 4, 3025)
local PIZZA_PATH = Workspace.Construcoes.Pizzaria.ifoodplace:WaitForChild("Pizza3")
local MAPA = Workspace:FindFirstChild("MAPA Builds")

-- ======== FUNÇÕES ========

-- Recarregar personagem (failsafe)
local function atualizarPersonagem()
    char = player.Character or player.CharacterAdded:Wait()
    root = char:WaitForChild("HumanoidRootPart")
end

-- Voo rente ao chão
local function voarAte(destinoPos)
    if not root or not root.Parent then atualizarPersonagem() end

    local alturaY = root.Position.Y
    local destino = Vector3.new(destinoPos.X, alturaY, destinoPos.Z)

    local distancia = (root.Position - destino).Magnitude
    local tempo = distancia / VELOCIDADE

    local tween = TweenService:Create(root, TweenInfo.new(tempo, Enum.EasingStyle.Linear), {
        CFrame = CFrame.new(destino)
    })

    tween:Play()
    tween.Completed:Wait()
end

-- Disparar ProximityPrompt
local function dispararPrompt(prompt)
    if prompt and prompt:IsA("ProximityPrompt") then
        pcall(fireproximityprompt, prompt)
        print("[Prompt] Disparado:", prompt.Parent.Name)
    else
        warn("[Prompt] inválido ou não encontrado.")
    end
end

-- Achar pad válido
local function getPadComPrompt()
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("ProximityPrompt") and obj.Parent and obj.Parent.Name == "OrderChar" then
            return obj.Parent.Parent, obj
        end
    end
end

-- Remover Seats existentes
local function removerSeatsExistentes()
    if not MAPA then return end
    for _, obj in pairs(MAPA:GetDescendants()) do
        if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
            obj:Destroy()
            print("[Seat] Removido:", obj:GetFullName())
        end
    end
end

-- Monitorar novos Seats e remover automaticamente
local function monitorarSeats()
    if not MAPA then return end
    MAPA.DescendantAdded:Connect(function(obj)
        if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
            obj:Destroy()
            print("[Seat] Novo removido:", obj:GetFullName())
        end
    end)
end

-- ======== LOOP PRINCIPAL ========

task.spawn(function()
    -- limpeza inicial
    removerSeatsExistentes()
    monitorarSeats()

    local pizzaPrompt = PIZZA_PATH:WaitForChild("ProximityPrompt")

    while task.wait(1) do
        -- 1) pegar pizza
        dispararPrompt(pizzaPrompt)

        task.wait(3)

        -- 2) ir até o pad
        local pad, prompt = getPadComPrompt()
        if pad and prompt then
            voarAte(pad.Position)
            dispararPrompt(prompt)

            task.wait(2)

            -- 3) ir até destino fixo
            voarAte(DESTINO_FIXO)

            -- 4) pegar pizza de novo
            dispararPrompt(pizzaPrompt)
        else
            warn("[Pad] Nenhum OrderChar com Prompt encontrado.")
        end
    end
end)

-- ======== FAILSAFE: Atualizar personagem ao morrer ========
player.CharacterAdded:Connect(function()
    task.wait(1) -- espera respawn
    atualizarPersonagem()
    print("[Player] Personagem atualizado após respawn.")
end)
